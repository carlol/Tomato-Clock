frontend framework: http://www.getuikit.com/

NB: remember to install coffee-script on OS...

alt+shift+t - Run a Cake task
alt+shift+r - Run some CoffeeScript (puts/print is available for output)
alt+shift+s - Run a syntax check
alt+shift+c - Compile a file
alt+shift+d - Display compiled JavaScript
alt+shift+l - Display lexer tokens
alt+shift+n - Display parser nodes
alt+shift+w - Toggle watch mode
alt+shift+p - Toggle output panel

bg = chrome.extension.getBackgroundPage()



tostring millisec

# TODO
1sec loop (2 events)


# differend msg during connection

- time // secs
- started // if loop enabled (to change btn_ico)
- stop // when loop end (to change btn_ico)


# http://www.getuikit.com/docs/alert.html -> per la notifica di fine timer

# se l'app viene messa in pausa, chiudendo e riaprendo il popup non aggiorna l'ora mostrata (anche se lo stato Ã¨ corretto): bisogna gestire l'invio dell'ora corrente all'instaurarsi della connessione.

# inserire overlay nella notification per chiuderla (che la copra tutta)

# fare la o di o'clock in ROSSO

# script:

var a = []

var $cit = $(document).find('[title="view quote"]')
var $aut = $(document).find('[title="view author"]')
$cit.each(function(i) { 
	a.push(
		{
			quote : $(this).text()
			, author : $($aut.get(i)).text()
		}
	)
});

JSON.stringify(a)

# aggiornare notifiche (switch per linux o altro os): http://developer.chrome.com/extensions/notifications.html

# rendere dinamico il logo, veramente! http://smus.com/dynamic-icons-chrome-extensions/
# tutorial: http://www.html5canvastutorials.com/tutorials/html5-canvas-circles/
# gia fatto: http://jsfiddle.net/Hnw6a/ #non e vero, non gira!
# questo ci si avvicina di piu http://html5.litten.com/graphing-data-in-the-html5-canvas-element-part-iv-simple-pie-charts/




# provare questo cakefile, dovrebbe essere compatibile anche per win:


fs     = require 'fs'
path   = require 'path'
{exec} = require 'child_process'

# Make sure we have our dependencies
try
  colors = require 'colors'
catch error
  console.error 'Please run `npm install colors` first'
  process.exit 1


# Options for parameterized watchany task
options =
  sourceDir: null
  outputDir: null
  deployDir: null


option '-s', '--source [DIR]', 'CoffeeScript source folder'
option '-o', '--output [DIR]', 'JavaScript output folder'
option '-d', '--deploy [DIR]', 'Deployment location to optionally copy the compiled JavaScript into'


# Parameterized watch and deploy task.
# Can be run from command line with options: cake -s ../coffee -o ../app -d ../deployfolder watchany
task 'watchany', 'Accepts paths as command line options. Automatically recompile CoffeeScript files to JavaScript.', ( opts ) ->
  options.sourceDir = opts?.source
  options.outputDir = opts?.output
  options.deployDir = opts?.deploy

  if( options.sourceDir? and options.outputDir? )

    console.log "Watching coffee files in #{options.sourceDir} for changes and compiling to #{options.outputDir}".yellow
    console.log "Deploying compiled files to #{options.deployDir}".yellow if options.deployDir?
    console.log "Press Control-C to quit, don't just close this window. (Stops Node process from continuing to run in the background)".yellow.bold
    console.log " "

    srcDeployer  = exec "coffee --compile --bare --watch --output #{options.deployDir} #{options.sourceDir}" if options.deployDir?

    console.log "Starting output watcher..."
    srcWatcher  = exec "coffee --compile --bare --watch --output #{options.outputDir} #{options.sourceDir}"
    srcWatcher.stderr.on 'data', (data) -> console.error stripEndline(data).red.bold

    srcWatcher.stdout.on 'data', (data) ->
      # Hacky way to find if something compiled successfully
      if /compiled/.test data
        process.stdout.write data.green
      else
        process.stderr.write data.red.bold
        filenameMatch = data.match /^In (.*)\.coffee/

        if filenameMatch and filenameMatch[1]
          # Add warning into code since watch window is in bg
          # insertJsError filenameMatch[1], "CoffeeScript compilation error: #{data}"
          # For future consideration, it won't work to insert the error into the .coffee file since it triggers another compile and will cause an infinite loop.
          # Maybe writing to a log file that can be monitored by an IDE, etc.?
          true

  else
    console.error stripEndline( "You must pass command options for source and output directories" ).red.bold
    console.error stripEndline( "e.g.: cake -s ../coffee -o ../app watch" ).red.bold
    console.error stripEndline( "Type 'cake' for a full list of tasks and options." ).red.bold

		
# Helper for stripping trailing endline when outputting
stripEndline = (str) ->
  return str.slice(0, str.length - 1) if str[str.length - 1] is "\n"
  return str

  
# Helper for inserting error text into a given file
insertJsError = (filename, js) ->
  jsFile = fs.openSync((path.join paths.libDir, "#{filename}.js"), 'w')
  fs.writeSync jsFile, '#' + js
  fs.closeSync jsFile


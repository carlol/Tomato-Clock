// Generated by CoffeeScript 1.6.3
(function() {
  define(['R', 'MessageEmitter', '_'], function(R, MessageEmitter, _) {
    var Timer;
    Timer = (function() {
      var T, changeIcon, counter, n, _target;

      function Timer() {}

      T = null;

      counter = 0;

      n = 10;

      _target = null;

      changeIcon = function(n) {
        return chrome.browserAction.setIcon({
          path: _.isDef(n) ? R.path.icon + n + ".jpg" : R.path.default_icon
        });
      };

      Timer.prototype.init = function() {
        var self;
        self = this;
        chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
          var _name;
          return typeof self[_name = request.type] === "function" ? self[_name](request, sender, sendResponse) : void 0;
        });
        return chrome.runtime.onConnect.addListener(function(port) {
          _target = port;
          return port.onDisconnect.addListener(function() {
            return _target = null;
          });
        });
      };

      Timer.prototype.start = function(req, sender, sendResponse) {
        var task, tick;
        if (T != null) {
          return false;
        }
        console.log(R.string.start_timer_msg);
        console.log(req);
        tick = req.time / n;
        T = setInterval(function() {
          return task();
        }, tick);
        task = function() {
          if (counter >= n) {
            this.stop();
            return;
          }
          changeIcon(counter);
          counter++;
          if (_target != null) {
            return _target.postMessage({
              s: counter
            });
          }
        };
        return true;
      };

      Timer.prototype.pause = function(req, sender, sendResponse) {
        if (T != null) {
          window.clearInterval(T);
          T = null;
          return console.log(R.string.pause_timer_msg);
        }
      };

      Timer.prototype.stop = function(req, sender, sendResponse) {
        if (T != null) {
          window.clearInterval(T);
          T = null;
        }
        counter = 0;
        changeIcon();
        console.log(R.string.stop_timer_msg);
        return true;
      };

      return Timer;

    })();
    return new Timer();
  });

}).call(this);

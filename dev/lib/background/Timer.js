// Generated by CoffeeScript 1.6.3
(function() {
  define(['R', '_', 'TagIO', 'AppStateIO', 'NotificationManager'], function(R, _, TagIO, App, NM) {
    var T, changeIcon, counter, n, s, _target;
    T = null;
    counter = s = 0;
    n = 10;
    _target = null;
    changeIcon = function(n) {
      console.log(n);
      return chrome.browserAction.setIcon({
        path: n != null ? R.path.icon + n + ".png" : R.path.default_icon
      });
    };
    return {
      init: function() {
        var self;
        self = this;
        return chrome.runtime.onConnect.addListener(function(port) {
          _target = port;
          port.onMessage.addListener(function(req) {
            var _name;
            return typeof self[_name = req.type] === "function" ? self[_name](req) : void 0;
          });
          if (s !== 0) {
            port.postMessage({
              type: R.key.resume_timer,
              paused: T == null,
              secs: s
            });
          }
          return port.onDisconnect.addListener(function() {
            return _target = null;
          });
        });
      },
      start: function(req) {
        var secs, task, tick,
          _this = this;
        if (T != null) {
          return false;
        }
        secs = req.time / 1000;
        tick = secs / n;
        T = setInterval(function() {
          return task();
        }, 1000);
        task = function() {
          if (s >= secs) {
            _this.stop(req);
            if (_target) {
              _target.postMessage({
                type: R.key.end_timer
              });
            }
            if (req.tag) {
              TagIO.incr(req.tag);
            }
            App.loadSoundCheck(function(isEnabled) {
              if (isEnabled) {
                return (new Audio(R.path.alarm_sound)).play();
              }
            });
            NM.showNotification();
            return;
          }
          if (s >= tick * counter) {
            changeIcon(counter);
            counter++;
          }
          s++;
          if (_target != null) {
            return _target.postMessage({
              type: R.key.update_timer,
              secs: s
            });
          }
        };
        return true;
      },
      pause: function(req) {
        if (T != null) {
          window.clearInterval(T);
          return T = null;
        }
      },
      stop: function(req) {
        if (T != null) {
          window.clearInterval(T);
          T = null;
        }
        counter = s = 0;
        changeIcon();
        return true;
      }
    };
  });

}).call(this);
